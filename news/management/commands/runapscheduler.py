import logging
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')
from django.conf import settings
from apscheduler.schedulers.blocking import BlockingScheduler
from apscheduler.triggers.cron import CronTrigger
from django.core.management.base import BaseCommand
from django_apscheduler.jobstores import DjangoJobStore
from django_apscheduler.models import DjangoJobExecution
from django.core.mail import EmailMultiAlternatives
from django.template.loader import render_to_string
from django.utils import timezone
from datetime import timedelta
try:
    from news.models import Category, Post
except ImportError:
    from ..models import Category, Post

logger = logging.getLogger(__name__)


def send_weekly_digest():
    print("üìß –ó–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏...")

    week_ago = timezone.now() - timedelta(days=7)
    total_emails = 0

    for category in Category.objects.all():
        new_posts = Post.objects.filter(
            categories=category,
            created_at__gte=week_ago
        ).order_by('-created_at')

        if not new_posts:
            continue

        subscribers = category.subscribers.all()

        for user in subscribers:
            if user.email:
                try:
                    html_content = render_to_string('account/email/weekly_digest.html', {
                        'user': user,
                        'category': category,
                        'posts': new_posts,
                        'week_ago': week_ago,
                    })

                    msg = EmailMultiAlternatives(
                        subject=f'üì∞ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞: {new_posts.count()} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –≤ —Ä–∞–∑–¥–µ–ª–µ "{category.name}"',
                        body=f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {user.username}!\n\n'
                             f'–ó–∞ –Ω–µ–¥–µ–ª—é –≤ —Ä–∞–∑–¥–µ–ª–µ "{category.name}" –ø–æ—è–≤–∏–ª–æ—Å—å {new_posts.count()} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π.\n\n'
                             f'–ß–∏—Ç–∞–π—Ç–µ –Ω–∞ –Ω–∞—à–µ–º –ø–æ—Ä—Ç–∞–ª–µ: http://127.0.0.1:8000/news/\n\n'
                             f'–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\nNews Portal',
                        from_email=settings.DEFAULT_FROM_EMAIL,
                        to=[user.email],
                    )
                    msg.attach_alternative(html_content, "text/html")
                    msg.send()

                    total_emails += 1
                    print(f"   ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user.email}")

                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

    print(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å–µ–º: {total_emails}")


def delete_old_job_executions(max_age=604_800):
    DjangoJobExecution.objects.delete_old_job_executions(max_age)


class Command(BaseCommand):
    help = "Runs APScheduler."

    def handle(self, *args, **options):
        scheduler = BlockingScheduler(timezone=settings.TIME_ZONE)
        scheduler.add_jobstore(DjangoJobStore(), "default")

        scheduler.add_job(
            send_weekly_digest,
            trigger=CronTrigger(day_of_week=0, hour=9, minute=0),
            id="weekly_digest",
            max_instances=1,
            replace_existing=True,
        )
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 9:00)")

        scheduler.add_job(
            delete_old_job_executions,
            trigger=CronTrigger(day_of_week="mon", hour="00", minute="00"),
            id="delete_old_job_executions",
            max_instances=1,
            replace_existing=True,
        )
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á")

        try:
            print("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
            scheduler.start()
        except KeyboardInterrupt:
            print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
            scheduler.shutdown()