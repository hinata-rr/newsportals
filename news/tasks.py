from celery import shared_task
from django.core.mail import EmailMultiAlternatives
from django.template.loader import render_to_string
from django.conf import settings
from django.utils import timezone
from datetime import timedelta
from .models import Post, Category
import logging

logger = logging.getLogger(__name__)


@shared_task
def send_new_post_notification(post_id):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–º –ø–æ—Å—Ç–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
    """
    try:
        post = Post.objects.get(id=post_id)
        categories = post.categories.all()

        for category in categories:
            subscribers = category.subscribers.all()

            for user in subscribers:
                if user.email:
                    html_content = render_to_string('account/email/new_post_notification.html', {
                        'post': post,
                        'user': user,
                        'category': category,
                    })

                    msg = EmailMultiAlternatives(
                        subject=f'–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ "{category.name}"',
                        body=f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {user.username}. –ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –≤ —Ç–≤–æ—ë–º –ª—é–±–∏–º–æ–º —Ä–∞–∑–¥–µ–ª–µ!\n\n'
                             f'–ó–∞–≥–æ–ª–æ–≤–æ–∫: {post.title}\n'
                             f'–¢–µ–∫—Å—Ç: {post.content[:50]}...\n\n'
                             f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}',
                        from_email=settings.DEFAULT_FROM_EMAIL,
                        to=[user.email],
                    )
                    msg.attach_alternative(html_content, "text/html")
                    msg.send()

                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user.email}")

    except Post.DoesNotExist:
        logger.error(f"–ü–æ—Å—Ç —Å ID {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


@shared_task
def send_weekly_digest():
    """
    –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
    """
    logger.info("–ó–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏...")

    week_ago = timezone.now() - timedelta(days=7)
    total_emails = 0

    for category in Category.objects.all():
        new_posts = Post.objects.filter(
            categories=category,
            created_at__gte=week_ago
        ).order_by('-created_at')

        if not new_posts:
            continue

        subscribers = category.subscribers.all()

        for user in subscribers:
            if user.email:
                try:
                    html_content = render_to_string('account/email/weekly_digest.html', {
                        'user': user,
                        'category': category,
                        'posts': new_posts,
                        'week_ago': week_ago,
                    })

                    msg = EmailMultiAlternatives(
                        subject=f'üì∞ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞: {new_posts.count()} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –≤ —Ä–∞–∑–¥–µ–ª–µ "{category.name}"',
                        body=f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {user.username}!\n\n'
                             f'–ó–∞ –Ω–µ–¥–µ–ª—é –≤ —Ä–∞–∑–¥–µ–ª–µ "{category.name}" –ø–æ—è–≤–∏–ª–æ—Å—å {new_posts.count()} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π.\n\n'
                             f'–ß–∏—Ç–∞–π—Ç–µ –Ω–∞ –Ω–∞—à–µ–º –ø–æ—Ä—Ç–∞–ª–µ: http://127.0.0.1:8000/news/\n\n'
                             f'–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\nNews Portal',
                        from_email=settings.DEFAULT_FROM_EMAIL,
                        to=[user.email],
                    )
                    msg.attach_alternative(html_content, "text/html")
                    msg.send()

                    total_emails += 1
                    logger.info(f"–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {user.email}")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

    logger.info(f"–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å–µ–º: {total_emails}")
    return f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å–µ–º: {total_emails}"
